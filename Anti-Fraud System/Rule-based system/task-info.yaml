type: edu
files:
- name: src/antifraud/AntiFraudApplication.java
  visible: true
  text: |-
    package antifraud;

    import org.springframework.boot.SpringApplication;
    import org.springframework.boot.autoconfigure.SpringBootApplication;

    @SpringBootApplication
    public class AntiFraudApplication {
        public static void main(String[] args) {
            SpringApplication.run(AntiFraudApplication.class, args);
        }
    }
  learner_created: false
- name: build.gradle
  visible: true
  text: |-
    plugins {
        id 'java'
        id 'org.springframework.boot' version '2.3.1.RELEASE'
        id 'io.spring.dependency-management' version '1.0.9.RELEASE'
    }


    repositories {
        mavenCentral()
    }

    sourceSets.main.resources.srcDirs = ["src/resources"]

    dependencies {
        implementation 'org.springframework.boot:spring-boot-starter'
        implementation 'org.springframework.boot:spring-boot-starter-actuator'
        implementation 'org.springframework.boot:spring-boot-starter-web'
        implementation group: 'org.hibernate', name: 'hibernate-validator', version: '6.1.0.Final'
    }
  learner_created: false
- name: src/resources/application.properties
  visible: true
  text: |-
    server.port=28852
    server.error.include-message=always
    management.endpoints.web.exposure.include=*
    management.endpoint.shutdown.enabled=true
    spring.jackson.serialization.INDENT_OUTPUT=true
  learner_created: false
- name: test/AntiFraudTest.java
  visible: false
  text: |-
    import antifraud.AntiFraudApplication;
    import com.google.gson.JsonArray;
    import com.google.gson.JsonObject;
    import org.hyperskill.hstest.dynamic.DynamicTest;
    import org.hyperskill.hstest.dynamic.input.DynamicTesting;
    import org.hyperskill.hstest.exception.outcomes.UnexpectedError;
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.mocks.web.request.HttpRequest;
    import org.hyperskill.hstest.mocks.web.response.HttpResponse;
    import org.hyperskill.hstest.stage.SpringTest;
    import org.hyperskill.hstest.testcase.CheckResult;

    import java.util.ArrayList;
    import java.util.List;

    import static org.hyperskill.hstest.common.JsonUtils.getJson;
    import static org.hyperskill.hstest.testing.expect.Expectation.expect;
    import static org.hyperskill.hstest.testing.expect.json.JsonChecker.*;

    class TestHint {
        private final String apiPath;
        private final String requestBody;
        private final String message;

        public TestHint(String apiPath, String requestBody, String message) {
            this.apiPath = apiPath;
            this.requestBody = requestBody;
            this.message = message;
        }

        @Override
        public String toString() {
            return "Test case\n" +
                    "Testing api: '" + apiPath + '\'' + "\n" +
                    (requestBody.length() > 0 ? "request: '" + requestBody + '\'' + "\n" : "") +
                    "Expectations: '" + message + "'" + "\n" +
                    "-----";
        }
    }

    public class AntiFraudTest extends SpringTest {

        private final String transactionApi = "/api/antifraud/transaction";
        private final String userApi = "/api/auth/user";
        private final String userListApi = "/api/auth/list";
        private final String lockApi = "/api/auth/access";
        private final String roleApi = "/api/auth/role";
        private final String ipApi = "/api/antifraud/suspicious-ip";
        private final String cardApi = "/api/antifraud/stolencard";
        List<Integer> userIdList = new ArrayList<>();

        private final String administrator = "{\n" +
                "   \"name\": \"administrator\",\n" +
                "   \"username\": \"administrator\",\n" +
                "   \"password\": \"oMoa4VvqnLxW\"\n" +
                "}";

        private final String johndoe1 = "{\n" +
                "   \"name\": \"John Doe 1\",\n" +
                "   \"username\": \"johndoe1\",\n" +
                "   \"password\": \"oMoa3VvqnLxW\"\n" +
                "}";

        private final String johndoe2 = "{\n" +
                "   \"name\": \"John Doe 2\",\n" +
                "   \"username\": \"johndoe2\",\n" +
                "   \"password\": \"oMoa5VvqnLxW\"\n" +
                "}";

        private final String johndoe3 = "{\n" +
                "   \"name\": \"John Doe 3\",\n" +
                "   \"username\": \"johndoe3\",\n" +
                "   \"password\": \"oMoa6VvqnLxW\"\n" +
                "}";

        private final String wronguser1 = "{\n" +
                "   \"name\": \"John Doe 1\",\n" +
                "   \"password\": \"oa3VvqnLxW\"\n" +
                "}";

        private final String wronguser2 = "{\n" +
                "   \"name\": \"John Doe 2\",\n" +
                "   \"username\": \"johndoe1\"\n" +
                "}";

        private final String wronguserCred1 = "{\n" +
                "   \"name\": \"John Doe 1\",\n" +
                "   \"username\": \"johndoe1\",\n" +
                "   \"password\": \"oa3VvqnLxW\"\n" +
                "}";

        private final String wronguserCred2 = "{\n" +
                "   \"name\": \"John Do\",\n" +
                "   \"username\": \"johndo\",\n" +
                "   \"password\": \"oMoa3VvqnLxW\"\n" +
                "}";

        private final String listAnswer1 = "[ {\n" +
                "  \"id\" : 1,\n" +
                "  \"name\" : \"administrator\",\n" +
                "  \"username\" : \"administrator\",\n" +
                "  \"role\" : \"ADMINISTRATOR\"\n" +
                "}, {\n" +
                "  \"id\" : 2,\n" +
                "  \"name\" : \"John Doe 1\",\n" +
                "  \"username\" : \"johndoe1\",\n" +
                "  \"role\" : \"MERCHANT\"\n" +
                "}, {\n" +
                "  \"id\" : 4,\n" +
                "  \"name\" : \"John Doe 2\",\n" +
                "  \"username\" : \"johndoe2\",\n" +
                "  \"role\" : \"MERCHANT\"\n" +
                "} ]";

        private final String listAnswer2 = "[ {\n" +
                "  \"id\" : 1,\n" +
                "  \"name\" : \"administrator\",\n" +
                "  \"username\" : \"administrator\",\n" +
                "  \"role\" : \"ADMINISTRATOR\"\n" +
                "}, {\n" +
                "  \"id\" : 4,\n" +
                "  \"name\" : \"John Doe 2\",\n" +
                "  \"username\" : \"johndoe2\",\n" +
                "  \"role\" : \"MERCHANT\"\n" +
                "} ]";

        private final String listAnswer3 = "[ {\n" +
                "  \"id\" : 1,\n" +
                "  \"name\" : \"administrator\",\n" +
                "  \"username\" : \"administrator\",\n" +
                "  \"role\" : \"ADMINISTRATOR\"\n" +
                "}, {\n" +
                "  \"id\" : 4,\n" +
                "  \"name\" : \"John Doe 2\",\n" +
                "  \"username\" : \"johndoe2\",\n" +
                "  \"role\" : \"SUPPORT\"\n" +
                "} ]";

        private final String tr1 = "{\n" +
                "  \"amount\": 1,\n" +
                "  \"ip\": \"192.168.1.1\",\n" +
                "  \"number\": \"4000008449433403\",\n" +
                "  \"region\": \"EAP\",\n" +
                "  \"date\": \"2022-01-22T16:00:00\"\n" +
                "}";

        private final String tr2 = "{\n" +
                "  \"amount\": 199,\n" +
                "  \"ip\": \"192.168.1.1\",\n" +
                "  \"number\": \"4000008449433403\",\n" +
                "  \"region\": \"EAP\",\n" +
                "  \"date\": \"2022-01-22T16:01:00\"\n" +
                "}";

        private final String tr3 = "{\n" +
                "  \"amount\": 200,\n" +
                "  \"ip\": \"192.168.1.1\",\n" +
                "  \"number\": \"4000008449433403\",\n" +
                "  \"region\": \"EAP\",\n" +
                "  \"date\": \"2022-01-22T16:02:00\"\n" +
                "}";

        private final String tr4 = "{\n" +
                "  \"amount\": 201,\n" +
                "  \"ip\": \"192.168.1.1\",\n" +
                "  \"number\": \"4000008449433403\",\n" +
                "  \"region\": \"EAP\",\n" +
                "  \"date\": \"2022-01-22T16:03:00\"\n" +
                "}";

        private final String tr5 = "{\n" +
                "  \"amount\": 1499,\n" +
                "  \"ip\": \"192.168.1.1\",\n" +
                "  \"number\": \"4000008449433403\",\n" +
                "  \"region\": \"EAP\",\n" +
                "  \"date\": \"2022-01-22T16:04:00\"\n" +
                "}";

        private final String tr6 = "{\n" +
                "  \"amount\": 1500,\n" +
                "  \"ip\": \"192.168.1.1\",\n" +
                "  \"number\": \"4000008449433403\",\n" +
                "  \"region\": \"EAP\",\n" +
                "  \"date\": \"2022-01-22T16:05:00\"\n" +
                "}";

        private final String tr7 = "{\n" +
                "  \"amount\": 1501,\n" +
                "  \"ip\": \"192.168.1.1\",\n" +
                "  \"number\": \"4000008449433403\",\n" +
                "  \"region\": \"EAP\",\n" +
                "  \"date\": \"2022-01-22T16:06:00\"\n" +
                "}";

        private final String tr8 = "{\n" +
                "  \"amount\": 2000,\n" +
                "  \"ip\": \"192.168.1.1\",\n" +
                "  \"number\": \"4000008449433403\",\n" +
                "  \"region\": \"EAP\",\n" +
                "  \"date\": \"2022-01-22T16:07:00\"\n" +
                "}";

        private final String trW1 = "{\n" +
                "  \"amount\": -1,\n" +
                "  \"ip\": \"192.168.1.1\",\n" +
                "  \"number\": \"4000008449433403\",\n" +
                "  \"region\": \"EAP\",\n" +
                "  \"date\": \"2022-01-22T16:00:00\"\n" +
                "}";

        private final String trW2 = "{\n" +
                "  \"amount\": 0,\n" +
                "  \"ip\": \"192.168.1.1\",\n" +
                "  \"number\": \"4000008449433403\",\n" +
                "  \"region\": \"EAP\",\n" +
                "  \"date\": \"2022-01-22T16:00:00\"\n" +
                "}";

        private final String trW3 = "{\n" +
                "  \"ip\": \"192.168.1.1\",\n" +
                "  \"number\": \"4000008449433403\",\n" +
                "  \"region\": \"EAP\",\n" +
                "  \"date\": \"2022-01-22T16:00:00\"\n" +
                "}";

        private final String trW4 = "{\n" +
                "  \"amount\": \" \",\n" +
                "  \"ip\": \"192.168.1.1\",\n" +
                "  \"number\": \"4000008449433403\",\n" +
                "  \"region\": \"EAP\",\n" +
                "  \"date\": \"2022-01-22T16:00:00\"\n" +
                "}";

        private final String trW5 = "{\n" +
                "  \"amount\": \"\",\n" +
                "  \"ip\": \"192.168.1.1\",\n" +
                "  \"number\": \"4000008449433403\",\n" +
                "  \"region\": \"EAP\",\n" +
                "  \"date\": \"2022-01-22T16:00:00\"\n" +
                "}";

        private final String trW6 = "{ }";

        private final String trP1 = "{\n" +
                "  \"amount\": 1000,\n" +
                "  \"ip\": \"192.168.1.67\",\n" +
                "  \"number\": \"4000008449433403\",\n" +
                "  \"region\": \"EAP\",\n" +
                "  \"date\": \"2022-01-22T16:00:00\"\n" +
                "}";

        private final String trP2 = "{\n" +
                "  \"amount\": 1000,\n" +
                "  \"ip\": \"192.168.1.1\",\n" +
                "  \"number\": \"4000003305160034\",\n" +
                "  \"region\": \"EAP\",\n" +
                "  \"date\": \"2022-01-22T16:00:00\"\n" +
                "}";

        private final String trP3 = "{\n" +
                "  \"amount\": 1000,\n" +
                "  \"ip\": \"192.168.1.67\",\n" +
                "  \"number\": \"4000003305160034\",\n" +
                "  \"region\": \"EAP\",\n" +
                "  \"date\": \"2022-01-22T16:00:00\"\n" +
                "}";

        private final String trP4 = "{\n" +
                "  \"amount\": 2000,\n" +
                "  \"ip\": \"192.168.1.67\",\n" +
                "  \"number\": \"4000003305160034\",\n" +
                "  \"region\": \"EAP\",\n" +
                "  \"date\": \"2022-01-22T16:00:00\"\n" +
                "}";

        // correlation rules
        private final String corr1IP = "{\n" +
                "  \"amount\": 1,\n" +
                "  \"ip\": \"192.168.1.2\",\n" +
                "  \"number\": \"4000008449433403\",\n" +
                "  \"region\": \"EAP\",\n" +
                "  \"date\": \"2022-01-22T17:10:00\"\n" +
                "}";

        private final String corr2IP = "{\n" +
                "  \"amount\": 1,\n" +
                "  \"ip\": \"192.168.1.3\",\n" +
                "  \"number\": \"4000008449433403\",\n" +
                "  \"region\": \"EAP\",\n" +
                "  \"date\": \"2022-01-22T17:11:00\"\n" +
                "}";

        private final String corr22IP = "{\n" +
                "  \"amount\": 1,\n" +
                "  \"ip\": \"192.168.1.3\",\n" +
                "  \"number\": \"4000008449433403\",\n" +
                "  \"region\": \"EAP\",\n" +
                "  \"date\": \"2022-01-22T17:12:00\"\n" +
                "}";

        private final String corr3IP = "{\n" +
                "  \"amount\": 1,\n" +
                "  \"ip\": \"192.168.1.4\",\n" +
                "  \"number\": \"4000008449433403\",\n" +
                "  \"region\": \"EAP\",\n" +
                "  \"date\": \"2022-01-22T17:12:00\"\n" +
                "}";

        private final String corr4IP = "{\n" +
                "  \"amount\": 1,\n" +
                "  \"ip\": \"192.168.1.5\",\n" +
                "  \"number\": \"4000008449433403\",\n" +
                "  \"region\": \"EAP\",\n" +
                "  \"date\": \"2022-01-22T17:13:00\"\n" +
                "}";

        private final String corr5IP = "{\n" +
                "  \"amount\": 2000,\n" +
                "  \"ip\": \"192.168.1.5\",\n" +
                "  \"number\": \"4000008449433403\",\n" +
                "  \"region\": \"EAP\",\n" +
                "  \"date\": \"2022-01-22T17:14:00\"\n" +
                "}";

        private final String corr1Reg = "{\n" +
                "  \"amount\": 1,\n" +
                "  \"ip\": \"192.168.1.2\",\n" +
                "  \"number\": \"4000008449433403\",\n" +
                "  \"region\": \"EAP\",\n" +
                "  \"date\": \"2022-01-21T17:10:00\"\n" +
                "}";

        private final String corr2Reg = "{\n" +
                "  \"amount\": 1,\n" +
                "  \"ip\": \"192.168.1.2\",\n" +
                "  \"number\": \"4000008449433403\",\n" +
                "  \"region\": \"ECA\",\n" +
                "  \"date\": \"2022-01-21T17:11:00\"\n" +
                "}";

        private final String corr22Reg = "{\n" +
                "  \"amount\": 1,\n" +
                "  \"ip\": \"192.168.1.2\",\n" +
                "  \"number\": \"4000008449433403\",\n" +
                "  \"region\": \"ECA\",\n" +
                "  \"date\": \"2022-01-21T17:12:00\"\n" +
                "}";

        private final String corr3Reg = "{\n" +
                "  \"amount\": 1,\n" +
                "  \"ip\": \"192.168.1.2\",\n" +
                "  \"number\": \"4000008449433403\",\n" +
                "  \"region\": \"HIC\",\n" +
                "  \"date\": \"2022-01-21T17:13:00\"\n" +
                "}";

        private final String corr4Reg = "{\n" +
                "  \"amount\": 1,\n" +
                "  \"ip\": \"192.168.1.2\",\n" +
                "  \"number\": \"4000008449433403\",\n" +
                "  \"region\": \"SSA\",\n" +
                "  \"date\": \"2022-01-21T17:14:00\"\n" +
                "}";

        private final String corr5Reg = "{\n" +
                "  \"amount\": 2000,\n" +
                "  \"ip\": \"192.168.1.2\",\n" +
                "  \"number\": \"4000008449433403\",\n" +
                "  \"region\": \"SA\",\n" +
                "  \"date\": \"2022-01-21T17:15:00\"\n" +
                "}";





        private final String ipAnswer = "[ {\n" +
                "  \"id\" : 1,\n" +
                "  \"ip\" : \"192.168.1.66\"\n" +
                "}, {\n" +
                "  \"id\" : 2,\n" +
                "  \"ip\" : \"192.168.1.67\"\n" +
                "} ]";

        private final String ipAnswer2 = "[ {\n" +
                "  \"id\" : 2,\n" +
                "  \"ip\" : \"192.168.1.67\"\n" +
                "} ]";

        private final String ipAnswerEmpty = "[]";

        private final String cardAnswerEmpty = "[]";

        private final String cardAnswer = "[ {\n" +
                "  \"id\" : 1,\n" +
                "  \"number\" : \"4000003305061034\"\n" +
                "}, {\n" +
                "  \"id\" : 2,\n" +
                "  \"number\" : \"4000003305160034\"\n" +
                "} ]";

        private final String cardAnswer2 = "[ {\n" +
                "  \"id\" : 2,\n" +
                "  \"number\" : \"4000003305160034\"\n" +
                "} ]";




        public AntiFraudTest() {
            super(AntiFraudApplication.class, "../service_db.mv.db");
        }

        /**
         * Method for restarting application
         *
         */
        private CheckResult restartApplication() {
            try {
                reloadSpring();
            } catch (Exception ex) {
                throw new UnexpectedError(ex.getMessage());
            }
            return CheckResult.correct();
        }

        private HttpResponse checkResponseStatus(String user, String body,
                                                 int status, String api, String method) {
            HttpRequest request = null;
            switch (method) {
                case "GET":
                    request = get(api);
                    break;
                case "POST":
                    request = post(api, body);
                    break;
                case "PUT":
                    request = put(api, body);
                    break;
                case "DELETE":
                    request = delete(api);
                    break;
            }

            if (user != null) {
                JsonObject userJson = getJson(user).getAsJsonObject();
                String password = userJson.get("password").getAsString();
                String login = userJson.get("username").getAsString().toLowerCase();
                request = request.basicAuth(login, password);
            }
            HttpResponse response = request.send();

            if (response.getStatusCode() != status) {
                throw new WrongAnswer(method + " " + api  + " should respond with "
                        + "status code " + status + ", responded: " + response.getStatusCode() + "\n"
                        + "Response body:\n" + response.getContent() + "\n");
            }
            return response;
        }

        public boolean isNumeric(String strNum) {
            if (strNum == null) {
                return false;
            }
            try {
                long l = Long.parseLong(strNum);
            } catch (NumberFormatException nfe) {
                return false;
            }
            return true;
        }

        CheckResult testAddUser(String body, int status, String role, TestHint hint) {

            System.out.println(hint.toString());

            HttpResponse response = checkResponseStatus(null, body, status, userApi, "POST");


            if (response.getStatusCode() == 201) {

                JsonObject rightResponse = getJson(body).getAsJsonObject();
                rightResponse.remove("password");

                // Check is it JSON in response or something else
                if (!response.getJson().isJsonObject()) {
                    return CheckResult.wrong("Wrong object in response, expected JSON but was \n" +
                            response.getContent().getClass());

                }

                JsonObject jsonResponse = response.getJson().getAsJsonObject();

                // Check if password is presence in response
                if (jsonResponse.get("password") != null) {
                    return CheckResult.wrong("You must remove password from response\n" +
                            jsonResponse);
                }

                if (jsonResponse.get("id") == null) {
                    return CheckResult.wrong("Response must contain user ID\n" +
                            "Received response:\n" +
                            jsonResponse);
                }

                if (jsonResponse.get("id").isJsonNull()) {
                    return CheckResult.wrong("Response must contain user ID\n" +
                            "Received response:\n" +
                            jsonResponse);
                }

                if (userIdList.contains(jsonResponse.get("id").getAsInt())) {
                    return CheckResult.wrong("User ID must be unique!\n" +
                            "Received response:\n" +
                            jsonResponse);
                }

                rightResponse.addProperty("id", jsonResponse.get("id").toString());
                // Check JSON in response
                expect(response.getContent()).asJson().check(
                        isObject()
                                .value("id", isInteger())
                                .value("name", rightResponse.get("name").getAsString())
                                .value("role", role)
                                .value("username", isString(s -> s.equalsIgnoreCase(rightResponse.get("username").getAsString())))
                );
                userIdList.add(jsonResponse.get("id").getAsInt());
            }
            return CheckResult.correct();
        }

        CheckResult testDeleteUser(String body, int status, String user, TestHint hint) {

            System.out.println(hint.toString());

            HttpResponse response = checkResponseStatus(body, "", status, userApi + "/" + user, "DELETE");

            if (response.getStatusCode() == 200) {

                // Check is it JSON in response or something else
                if (!response.getJson().isJsonObject()) {
                    return CheckResult.wrong("Wrong object in response, expected JSON but was \n" +
                            response.getContent().getClass());

                }

                JsonObject jsonResponse = response.getJson().getAsJsonObject();

                // Check JSON in response
                expect(response.getContent()).asJson().check(
                        isObject()
                                .value("status", "Deleted successfully!")
                                .value("username", isString(s -> s.equalsIgnoreCase(user)))
                );
            }
            return CheckResult.correct();
        }

        private CheckResult testListUser(String user, int status, String answer,
                                         int position, TestHint hint) {

            System.out.println(hint.toString());

            HttpResponse response = checkResponseStatus(user, "", status, userListApi, "GET");

            if (response.getStatusCode() == 200) {
                // Check is it array of JSON in response or something else
                if (!response.getJson().isJsonArray()) {
                    return CheckResult.wrong("Wrong object in response, expected array of JSON but was \n" +
                            response.getContent().getClass());

                }

                JsonArray correctJson = getJson(answer).getAsJsonArray();
                JsonArray responseJson = getJson(response.getContent()).getAsJsonArray();
                if (responseJson.size() == 0) {
                    throw new WrongAnswer("Empty array in response!");
                }

                if (responseJson.size() != position + 1) {
                    throw new WrongAnswer("Incorrect number - " +  responseJson.size() +
                            " users in response, must be - " + (position + 1));
                }

                // Check JSON in response
                expect(responseJson.get(position).toString()).asJson().check(
                        isObject()
                                .value("id", isInteger())
                                .value("name", correctJson.get(position).getAsJsonObject().get("name").getAsString())
                                .value("role", correctJson.get(position).getAsJsonObject().get("role").getAsString())
                                .value("username",
                                        isString(s -> s.equalsIgnoreCase(correctJson.get(position).getAsJsonObject()
                                                .get("username").getAsString()))
                                ));

            }
            return CheckResult.correct();
        }

        private CheckResult testLock(String user, int status, String operation, String username, TestHint hint) {
            System.out.println(hint.toString());

            JsonObject jsonBody = new JsonObject();
            jsonBody.addProperty("username", username);
            jsonBody.addProperty("operation", operation);

            HttpResponse response = checkResponseStatus(user, jsonBody.toString(), status, lockApi, "PUT");
            if (response.getStatusCode() == 200) {
                expect(response.getContent()).asJson().check(
                        isObject()
                                .value("status", isString(s ->
                                        s.equalsIgnoreCase("User " + username + " " + operation + "ed!"))));
            }
            return CheckResult.correct();
        }

        private CheckResult testRole(String user, int status, String role, String username, TestHint hint) {
            System.out.println(hint.toString());

            JsonObject jsonBody = new JsonObject();
            jsonBody.addProperty("username", username);
            jsonBody.addProperty("role", role);

            HttpResponse response = checkResponseStatus(user, jsonBody.toString(), status, roleApi, "PUT");

            if (response.getStatusCode() == 200) {
                expect(response.getContent()).asJson().check(
                        isObject()
                                .value("id", isInteger())
                                .value("name", isString())
                                .value("role", role)
                                .value("username", isString(s -> s.equalsIgnoreCase(username))));
            }
            return CheckResult.correct();
        }

        private CheckResult testTransaction(String user, String api, String method, int status, String body,
                                            String answer, String answer2, TestHint hint) {

            System.out.println(hint.toString());

            HttpResponse response = checkResponseStatus(user, body, status, api, method);

            // Check JSON in response
            if (response.getStatusCode() == 200) {
                expect(response.getContent()).asJson().check(
                        isObject()
                                .value("result", answer)
                                .value("info", answer2));
            }
            return CheckResult.correct();
        }

        private CheckResult testAddIP(String user, int status, String ip, TestHint hint) {
            System.out.println(hint.toString());

            JsonObject jsonBody = new JsonObject();
            jsonBody.addProperty("ip", ip);

            HttpResponse response = checkResponseStatus(user, jsonBody.toString(), status, ipApi, "POST");
            if (response.getStatusCode() == 200) {
                expect(response.getContent()).asJson().check(
                        isObject()
                                .value("id", isInteger())
                                .value("ip", ip));
            }
            return CheckResult.correct();
        }

        private CheckResult testDeleteIP(String user, int status, String ip, TestHint hint) {
            System.out.println(hint.toString());

            HttpResponse response = checkResponseStatus(user, "", status, ipApi + "/" + ip, "DELETE");
            if (response.getStatusCode() == 200) {
                expect(response.getContent()).asJson().check(
                        isObject()
                                .value("status", "IP " + ip + " successfully removed!"));
            }
            return CheckResult.correct();
        }

        private CheckResult testAddCard(String user, int status, String number, TestHint hint) {
            System.out.println(hint.toString());

            JsonObject jsonBody = new JsonObject();
            jsonBody.addProperty("number", number);

            HttpResponse response = checkResponseStatus(user, jsonBody.toString(), status, cardApi, "POST");
            if (response.getStatusCode() == 200) {
                expect(response.getContent()).asJson().check(
                        isObject()
                                .value("id", isInteger())
                                .value("number", number));
            }
            return CheckResult.correct();
        }

        private CheckResult testDeleteCard(String user, int status, String number, TestHint hint) {
            System.out.println(hint.toString());

            HttpResponse response = checkResponseStatus(user, "", status, cardApi + "/" + number, "DELETE");
            if (response.getStatusCode() == 200) {
                expect(response.getContent()).asJson().check(
                        isObject()
                                .value("status", "Card " + number + " successfully removed!"));
            }
            return CheckResult.correct();
        }

        private CheckResult testGetIP(String user, int status, String answer, TestHint hint) {
            System.out.println(hint.toString());

            HttpResponse response = checkResponseStatus(user, "", status, ipApi, "GET");

            if (response.getStatusCode() == 200) {
                if (!response.getJson().isJsonArray()) {
                    return CheckResult.wrong("Wrong object in response, expected array of JSON but was \n" +
                            response.getContent().getClass());

                }

                JsonArray correctJson = getJson(answer).getAsJsonArray();
                JsonArray responseJson = getJson(response.getContent()).getAsJsonArray();

                if (responseJson.size() != correctJson.size()) {
                    throw new WrongAnswer("Incorrect number - " +  responseJson.size() +
                            " objects in response, must be - " + correctJson.size());
                }

                // Check JSON in response
                for (int i =0; i < correctJson.size(); i++) {
                    expect(responseJson.get(i).toString()).asJson().check(
                            isObject()
                                    .value("id", isInteger())
                                    .value("ip", correctJson.get(i).getAsJsonObject().get("ip").getAsString())
                    );
                }

            }
            return CheckResult.correct();
        }

        private CheckResult testGetCard(String user, int status, String answer, TestHint hint) {
            System.out.println(hint.toString());

            HttpResponse response = checkResponseStatus(user, "", status, cardApi, "GET");

            if (response.getStatusCode() == 200) {
                if (!response.getJson().isJsonArray()) {
                    return CheckResult.wrong("Wrong object in response, expected array of JSON but was \n" +
                            response.getContent().getClass());

                }

                JsonArray correctJson = getJson(answer).getAsJsonArray();
                JsonArray responseJson = getJson(response.getContent()).getAsJsonArray();

                if (responseJson.size() != correctJson.size()) {
                    throw new WrongAnswer("Incorrect number - " +  responseJson.size() +
                            " objects in response, must be - " + correctJson.size());
                }

                // Check JSON in response
                for (int i =0; i < correctJson.size(); i++) {
                    expect(responseJson.get(i).toString()).asJson().check(
                            isObject()
                                    .value("id", isInteger())
                                    .value("number", correctJson.get(i).getAsJsonObject().get("number").getAsString())
                    );
                }

            }
            return CheckResult.correct();
        }

        @DynamicTest
        DynamicTesting[] dt = new DynamicTesting[]{
                // Test POST request for signup api
                () -> testAddUser(wronguser1, 400, "MERCHANT",
                        new TestHint(userApi, wronguser1, "In case of wrong data in request, endpoint" +
                                " must respond with BAD REQUEST  status (400).")), // 1

                () -> testAddUser(wronguser2, 400, "MERCHANT",
                        new TestHint(userApi, wronguser2, "In case of wrong data in request, endpoint" +
                                " must respond with BAD REQUEST  status (400).")), // 2

                () -> testAddUser(administrator, 201, "ADMINISTRATOR",
                        new TestHint(userApi, johndoe1, "If user successfully added, endpoint" +
                                " must respond with HTTP CREATED status (201) ")), // 3

                () -> testListUser(administrator, 200,  listAnswer1, 0,
                        new TestHint(userListApi, "", "Endpoint must respond with HTTP OK status (200)" +
                                " and body with array of objects representing the users sorted by ID in ascending order.")), // 4


                () -> testAddUser(johndoe1, 201, "MERCHANT",
                        new TestHint(userApi, johndoe1, "If user successfully added, endpoint" +
                                " must respond with HTTP CREATED status (201) ")), // 5

                () -> testListUser(administrator, 200,  listAnswer1, 1,
                        new TestHint(userListApi, "", "Endpoint must respond with HTTP OK status (200)" +
                                " and body with array of objects representing the users sorted by ID in ascending order.")), // 6

                () -> testListUser(wronguserCred1, 401,  listAnswer1, 0,
                        new TestHint(userListApi, "", "A user with incorrect credentials is not allowed")), // 7

                () -> testListUser(wronguserCred2, 401,  listAnswer1, 0,
                        new TestHint(userListApi, "", "A user with incorrect credentials is not allowed")), // 8

                () -> testTransaction(johndoe1, transactionApi, "POST", 401,tr1,
                        "ALLOWED", "none",
                        new TestHint(transactionApi, "", "Merchant after registration" +
                                " must be LOCKED")), // 9

                () -> testLock(administrator, 200, "UNLOCK", "johndoe1",
                        new TestHint(lockApi, "", "A user johndoe1 must be UNLOCKED")), // 10

                () -> testTransaction(johndoe1, transactionApi, "POST", 200,tr1,
                        "ALLOWED", "none",
                        new TestHint(transactionApi, "", "A user johndoe1 must be UNLOCKED")), // 11

                () -> testTransaction(johndoe1, transactionApi, "POST", 200,tr1,
                        "ALLOWED", "none",
                        new TestHint(transactionApi, "amount = 1", "Result validating of Transaction" +
                                " must be 'ALLOWED'")), // 12

                // Testing persistence
                () -> restartApplication(), // 13

                () -> testListUser(administrator, 200,  listAnswer1, 1,
                        new TestHint(userListApi, "", "After restart user must exist")), // 14

                () -> testAddUser(johndoe1, 409, "MERCHANT",
                        new TestHint(userApi, johndoe1, "In case of an attempt to register an existing user," +
                                " endpoint must respond with HTTP CONFLICT status (409).")), // 15

                () -> testAddUser(johndoe2, 201, "MERCHANT",
                        new TestHint(userApi, johndoe2, "If user successfully added, endpoint" +
                                " must respond with HTTP CREATED status (201) ")), // 16

                () -> testListUser(administrator, 200,  listAnswer1, 2,
                        new TestHint(userListApi, "", "Endpoint must respond with HTTP OK status (200)" +
                                " and body with array of objects representing the users sorted by ID in ascending order.")), // 17

                () -> testTransaction(johndoe1, transactionApi, "POST", 200, tr2,
                        "ALLOWED", "none",
                        new TestHint(transactionApi, "amount = 199", "Result validating of Transaction" +
                                " must be 'ALLOWED'")), // 18

                () -> testTransaction(johndoe1, transactionApi, "POST", 200, tr3,
                        "ALLOWED", "none",
                        new TestHint(transactionApi, "amount = 200", "Result validating of Transaction" +
                                " must be 'ALLOWED'")), // 19

                () -> testTransaction(johndoe1, transactionApi, "POST", 200, tr4,
                        "MANUAL_PROCESSING", "amount",
                        new TestHint(transactionApi, "amount = 201", "Result validating of Transaction" +
                                " must be 'MANUAL_PROCESSING'")), // 20

                () -> testTransaction(johndoe1, transactionApi, "POST", 200, tr5,
                        "MANUAL_PROCESSING", "amount",
                        new TestHint(transactionApi, "amount = 1499", "Result validating of Transaction" +
                                " must be 'MANUAL_PROCESSING'")), // 21

                () -> testTransaction(johndoe1, transactionApi, "POST", 200, tr6,
                        "MANUAL_PROCESSING", "amount",
                        new TestHint(transactionApi, "amount = 1500", "Result validating of Transaction" +
                                " must be 'MANUAL_PROCESSING'")), // 22

                () -> testTransaction(johndoe1, transactionApi, "POST", 200, tr7,
                        "PROHIBITED", "amount",
                        new TestHint(transactionApi, "amount = 1501", "Result validating of Transaction" +
                                " must be 'PROHIBITED'")), // 23

                () -> testTransaction(johndoe1, transactionApi, "POST", 200, tr8,
                        "PROHIBITED", "amount",
                        new TestHint(transactionApi, "amount = 2000", "Result validating of Transaction" +
                                " must be 'PROHIBITED'")), // 24

                () -> testTransaction(johndoe1, transactionApi, "POST", 400, trW1,
                        "Wrong request!", "none",
                        new TestHint(transactionApi, "amount = -1", "Response status" +
                                " must be 'Bad request'")), // 25

                () -> testTransaction(johndoe1, transactionApi, "POST", 400, trW2,
                        "Wrong request!", "none",
                        new TestHint(transactionApi, "amount = 0", "Response status" +
                                " must be 'Bad request'")), // 26

                () -> testTransaction(johndoe1, transactionApi, "POST", 400,trW3,
                        "Wrong request!", "none",
                        new TestHint(transactionApi, "amount = null", "Response status" +
                                " must be 'Bad request'")), // 27

                () -> testTransaction(johndoe1, transactionApi, "POST", 400,trW4,
                        "Wrong request!", "none",
                        new TestHint(transactionApi, "amount = \"\"", "Response status" +
                                " must be 'Bad request'")), // 28

                () -> testTransaction(johndoe1, transactionApi, "POST", 400, trW5,
                        "Wrong request!",  "none",
                        new TestHint(transactionApi, "amount = \" \"", "Response status" +
                                " must be 'Bad request'")), // 29

                () -> testTransaction(johndoe1, transactionApi, "POST", 400, trW6,
                        "Wrong request!",   "none",
                        new TestHint(transactionApi, "empty body", "Response status" +
                                " must be 'Bad request'")), // 30

                () -> testDeleteUser(administrator,404,"somebody",
                        new TestHint(userApi, userApi + "/" + "somebody", "If a user is not found," +
                                " respond with HTTP Not Found status (404).")), // 31

                () -> testDeleteUser(administrator,200,"johndoe1",
                        new TestHint(userApi, userApi + "/" + "johndoe1", "The endpoint must delete" +
                                " the user and respond with HTTP OK status (200)")), // 32

                () -> testListUser(administrator, 200,  listAnswer2, 1,
                        new TestHint(userListApi, "", "User 'johndoe1' must be delete")), // 33

                () -> testRole(administrator,404,"MERCHANT", "johndoe22",
                        new TestHint(roleApi, "", "If a user is not found, endpoint" +
                                " must respond with the HTTP Not Found status (404).")), // 34

                () -> testRole(administrator,400,"USER", "johndoe2",
                        new TestHint(roleApi, "", "If a role is not found, endpoint" +
                                " must respond with the HTTP Bad Request status (400).")), // 35

                () -> testRole(administrator,400,"ADMINISTRATOR", "johndoe2",
                        new TestHint(roleApi, "", "If a role is ADMINISTRATOR, endpoint" +
                                " must respond with the HTTP Bad Request status (400).")), // 36

                () -> testRole(administrator,200,"SUPPORT", "johndoe2",
                        new TestHint(roleApi, "", "If a role successfully changed," +
                                " respond with the HTTP OK status (200)")), // 37

                () -> testRole(administrator,409,"SUPPORT", "johndoe2",
                        new TestHint(roleApi, "", "If a role already assigned to a user," +
                                " endpoint must respond with the HTTP Conflict status (409).")), // 38

                () -> testLock(administrator, 200, "UNLOCK", "johndoe2",
                        new TestHint(lockApi, "", "A user johndoe2 must be UNLOCKED")), // 39

                () -> testListUser(johndoe2, 200,  listAnswer3, 1,
                        new TestHint(userListApi, "", "Role for user 'johndoe2" +
                                "' must be changed to SUPPORT")), // 40

                () -> testTransaction(johndoe2, transactionApi, "POST", 403, tr1,
                        "ALLOWED",   "none",
                        new TestHint(transactionApi, "", "Role MERCHANT must be removed from" +
                                " user johndoe2!")), // 41

                // test Locking
                () -> testAddUser(johndoe3, 201, "MERCHANT",
                        new TestHint(userApi, johndoe3, "If user successfully added, endpoint" +
                                " must respond with HTTP CREATED status (201) ")), // 42

                () -> testTransaction(johndoe3, transactionApi, "POST", 401, tr1,
                        "ALLOWED",  "none",
                        new TestHint(transactionApi, "", "MERCHANT user after registration" +
                                " must be LOCKED")), // 43

                () -> testLock(administrator, 200, "UNLOCK", "johndoe3",
                        new TestHint(lockApi, "", "A user johndoe3 must be UNLOCKED")), // 44

                () -> testTransaction(johndoe3, transactionApi, "POST", 200, tr1,
                        "ALLOWED",  "none",
                        new TestHint(transactionApi, "", "A user johndoe3 must be UNLOCKED")), // 45

                () -> testLock(administrator, 200, "LOCK", "johndoe3",
                        new TestHint(lockApi, "", "A user johndoe3 must be LOCKED")), // 46

                () -> testTransaction(johndoe3, transactionApi, "POST", 401, tr1,
                        "ALLOWED",  "none",
                        new TestHint(transactionApi, "", "A user johndoe3 must be LOCKED")), // 47

                () -> testLock(administrator, 200, "UNLOCK", "johndoe3",
                        new TestHint(lockApi, "", "A user johndoe3 must be UNLOCKED")), // 48

                // test role model
                () -> testTransaction(administrator, transactionApi, "POST", 403, tr1,
                        "ALLOWED",  "none",
                        new TestHint(transactionApi, "", "A user with role ADMINISTRATOR" +
                                " must not have access to " + transactionApi)), // 49

                () -> testTransaction(johndoe2, transactionApi, "POST", 403, tr1,
                        "ALLOWED",  "none",
                        new TestHint(transactionApi, "", "A user with role SUPPORT" +
                                " must not have access to " + transactionApi)), // 50

                () -> testTransaction(null, transactionApi, "POST", 401, tr1,
                        "ALLOWED",  "none",
                        new TestHint(transactionApi, "", "A user with role ANONYMOUS" +
                                " must not have access to " + transactionApi)), // 51

                () -> testDeleteUser(null,401,"johndoe1",
                        new TestHint(userApi, "", "A user with role ANONYMOUS" +
                                " must not have access to DELETE " + userApi)), // 52

                () -> testDeleteUser(johndoe2,403,"johndoe1",
                        new TestHint(userApi, "", "A user with role SUPPORT" +
                                " must not have access to DELETE " + userApi)), // 53

                () -> testDeleteUser(johndoe3,403,"johndoe1",
                        new TestHint(userApi, "", "A user with role MERCHANT" +
                                " must not have access to DELETE " + userApi)), // 54

                () -> testListUser(null, 401,  listAnswer3, 1,
                        new TestHint(userListApi, "", "A user with role ANONYMOUS" +
                                " must not have access to " + userListApi)), // 55

                () -> testListUser(johndoe3, 403,  listAnswer3, 1,
                        new TestHint(userListApi, "", "A user with role MERCHANT" +
                                " must not have access to " + userListApi)), // 56

                () -> testGetIP(administrator, 403, ipAnswerEmpty,
                        new TestHint(ipApi, "", "A user with role ADMINISTRATOR" +
                                " must not have access to GET " + ipApi)), // 57

                () -> testGetIP(johndoe3, 403, ipAnswerEmpty,
                        new TestHint(ipApi, "", "A user with role MERCHANT" +
                                " must not have access to GET " + ipApi)), // 58

                () -> testAddIP(administrator, 403, "192.168.1.66",
                        new TestHint(ipApi, "", "A user with role ADMINISTRATOR" +
                                " must not have access to POST " + ipApi)), // 59

                () -> testAddIP(johndoe3, 403, "192.168.1.66",
                        new TestHint(ipApi, "", "A user with role MERCHANT" +
                                " must not have access to POST " + ipApi)), // 60

                () -> testDeleteIP(administrator, 403, "192.168.1.66",
                        new TestHint(ipApi, "", "A user with role ADMINISTRATOR" +
                                " must not have access to DELETE " + ipApi)), // 61

                () -> testDeleteIP(johndoe3, 403, "192.168.1.66",
                        new TestHint(ipApi, "", "A user with role MERCHANT" +
                                " must not have access to DELETE " + ipApi)), // 62

                () -> testGetCard(administrator, 403, cardAnswerEmpty,
                        new TestHint(cardApi, "", "A user with role ADMINISTRATOR" +
                                " must not have access to GET " + cardApi)), // 63

                () -> testGetCard(johndoe3, 403, cardAnswerEmpty,
                        new TestHint(cardApi, "", "A user with role MERCHANT" +
                                " must not have access to GET " + cardApi)), // 64

                () -> testAddCard(administrator, 403, "4000003305061034",
                        new TestHint(cardApi, "", "A user with role ADMINISTRATOR" +
                                " must not have access to POST " + cardApi)), // 65

                () -> testAddCard(johndoe3, 403, "4000003305061034",
                        new TestHint(cardApi, "", "A user with role MERCHANT" +
                                " must not have access to POST " + cardApi)), // 66

                () -> testDeleteIP(administrator, 403, "4000003305061034",
                        new TestHint(cardApi, "", "A user with role ADMINISTRATOR" +
                                " must not have access to DELETE " + cardApi)), // 67

                () -> testDeleteIP(johndoe3, 403, "4000003305061034",
                        new TestHint(cardApi, "", "A user with role MERCHANT" +
                                " must not have access to DELETE " + cardApi)), // 68


                // Test ip black list
                () -> testGetIP(johndoe2, 200, ipAnswerEmpty,
                        new TestHint(ipApi, "", "Endpoint must respond with empty array")), // 69

                () -> testAddIP(johndoe2, 200, "192.168.1.66",
                        new TestHint(ipApi, "", "IP must be added to Black List")), // 70

                () -> testAddIP(johndoe2, 409, "192.168.1.66",
                        new TestHint(ipApi, "", "If IP already in database, " +
                                " endpoint must respond with the HTTP Conflict status (409).")), // 71

                () -> testAddIP(johndoe2, 400, "192.168.351.66",
                        new TestHint(ipApi, "", "If IP doesn't have right format," +
                                " respond with HTTP Bad Request status (400)")), // 72

                () -> testAddIP(johndoe2, 400, "192.168.1.",
                        new TestHint(ipApi, "", "If IP doesn't have right format," +
                                " respond with HTTP Bad Request status (400)")), // 73

                () -> testAddIP(johndoe2, 200, "192.168.1.67",
                        new TestHint(ipApi, "", "IP must be added to Black List")), // 74

                () -> testGetIP(johndoe2, 200, ipAnswer,
                        new TestHint(ipApi, "", "Endpoint must responds with Black List")), // 75

                () -> testDeleteIP(johndoe2, 200, "192.168.1.66",
                        new TestHint(ipApi, "", "IP must be removed from Black List")), // 76

                () -> testDeleteIP(johndoe2, 404, "192.168.1.66",
                        new TestHint(ipApi, "", "If IP not found in database, " +
                                "respond with the HTTP Not Found status (404).")), // 77

                () -> testDeleteIP(johndoe2, 400, "192.168.1.",
                        new TestHint(ipApi, "", "If IP doesn't have right format," +
                                " respond with HTTP Bad Request status (400)")), // 78

                () -> testGetIP(johndoe2, 200, ipAnswer2,
                        new TestHint(ipApi, "", "IP must be removed from Black List")), // 79


                // Test card number black list
                () -> testGetCard(johndoe2, 200, cardAnswerEmpty,
                        new TestHint(cardApi, "", "Endpoint must respond with empty array")), // 80

                () -> testAddCard(johndoe2, 200, "4000003305061034",
                        new TestHint(cardApi, "", "A card must be added to Black List")), // 81

                () -> testAddCard(johndoe2, 409, "4000003305061034",
                        new TestHint(cardApi, "", "If card-number already in database, " +
                                "endpoint must respond with the HTTP Conflict status (409).")), // 82

                () -> testAddCard(johndoe2, 400, "400000330506103",
                        new TestHint(cardApi, "", "If card-number doesn't have right format, " +
                                "endpoint must respond with HTTP Bad Request status (400).")), // 83

                () -> testAddCard(johndoe2, 400, "4000003305061033",
                        new TestHint(cardApi, "", "If checksum of card-number is wrong, " +
                                "endpoint must respond with HTTP Bad Request status (400).")), // 84

                () -> testAddCard(johndoe2, 200, "4000003305160034",
                        new TestHint(cardApi, "", "A card must be added to Black List")), // 85

                () -> testGetCard(johndoe2, 200, cardAnswer,
                        new TestHint(cardApi, "", "Endpoint must responds with Black List")), // 86

                () -> testDeleteCard(johndoe2, 200, "4000003305061034",
                        new TestHint(cardApi, "", "Card must be removed from Black List")), // 87

                () -> testDeleteCard(johndoe2, 404, "4000003305061034",
                        new TestHint(cardApi, "", "If card-number not found in database," +
                                " respond with the HTTP Not Found status (404).")), // 88

                () -> testDeleteCard(johndoe2, 400, "400000330506103",
                        new TestHint(cardApi, "", "If card-number doesn't have right format, " +
                                "endpoint must respond with HTTP Bad Request status (400).")), // 89

                () -> testGetCard(johndoe2, 200, cardAnswer2,
                        new TestHint(cardApi, "", "Card must be removed from Black List")), // 90

                // Test new validating
                () -> testTransaction(johndoe3, transactionApi, "POST", 200, trP1,
                        "PROHIBITED",  "ip",
                        new TestHint(transactionApi, "", "Transaction must be PROHIBITED" +
                                " due to - suspicious ip reason")), // 91

                () -> testTransaction(johndoe3, transactionApi, "POST", 200, trP2,
                        "PROHIBITED",  "card-number",
                        new TestHint(transactionApi, "", "Transaction must be PROHIBITED" +
                                " due to - stolen card reason")), // 92

                () -> testTransaction(johndoe3, transactionApi, "POST", 200, trP3,
                        "PROHIBITED",  "card-number, ip",
                        new TestHint(transactionApi, "", "Transaction must be PROHIBITED" +
                                " due to - stolen card, suspicious ip reasons")), // 93

                () -> testTransaction(johndoe3, transactionApi, "POST", 200, trP4,
                        "PROHIBITED",  "amount, card-number, ip",
                        new TestHint(transactionApi, "", "Transaction must be PROHIBITED" +
                                " due to - amount, stolen card, suspicious ip reasons")), // 94

                // Test correlation rules
                () -> testTransaction(johndoe3, transactionApi, "POST", 200, corr1IP,
                        "ALLOWED",  "none",
                        new TestHint(transactionApi, "", "Transaction must be ALLOWED")), // 95

                () -> testTransaction(johndoe3, transactionApi, "POST", 200, corr2IP,
                        "ALLOWED",  "none",
                        new TestHint(transactionApi, "", "Transaction must be ALLOWED")), // 96

                () -> testTransaction(johndoe3, transactionApi, "POST", 200, corr22IP,
                        "ALLOWED",  "none",
                        new TestHint(transactionApi, "", "Transaction must be ALLOWED")), // 97

                () -> testTransaction(johndoe3, transactionApi, "POST", 200, corr3IP,
                        "MANUAL_PROCESSING",  "ip-correlation",
                        new TestHint(transactionApi, "", "Transaction must be MANUAL_PROCESSING" +
                                " due to - ip correlation rule")), // 98

                () -> testTransaction(johndoe3, transactionApi, "POST", 200, corr4IP,
                        "PROHIBITED",  "ip-correlation",
                        new TestHint(transactionApi, "", "Transaction must be PROHIBITED" +
                                " due to - ip correlation rule")), // 99 Thnx to E. Kovko

                () -> testAddCard(johndoe2, 200, "4000008449433403",
                        new TestHint(cardApi, "", "A card must be added to Black List")), // 100

                () -> testAddIP(johndoe2, 200, "192.168.1.5",
                        new TestHint(ipApi, "", "IP must be added to Black List")), // 101

                () -> testTransaction(johndoe3, transactionApi, "POST", 200, corr5IP,
                        "PROHIBITED",  "amount, card-number, ip, ip-correlation",
                        new TestHint(transactionApi, "", "Transaction must be PROHIBITED" +
                                " due to - amount, card-number, ip, ip-correlation reasons")), // 102
                //
                () -> testDeleteCard(johndoe2, 200, "4000008449433403",
                        new TestHint(cardApi, "", "Card must be removed from Black List")), // 103

                () -> testDeleteIP(johndoe2, 200, "192.168.1.5",
                        new TestHint(ipApi, "", "IP must be removed from Black List")), // 104


                () -> testTransaction(johndoe3, transactionApi, "POST", 200, corr1Reg,
                        "ALLOWED",  "none",
                        new TestHint(transactionApi, "", "Transaction must be ALLOWED")), // 105

                () -> testTransaction(johndoe3, transactionApi, "POST", 200, corr2Reg,
                        "ALLOWED",  "none",
                        new TestHint(transactionApi, "", "Transaction must be ALLOWED")), // 106

                () -> testTransaction(johndoe3, transactionApi, "POST", 200, corr22Reg,
                        "ALLOWED",  "none",
                        new TestHint(transactionApi, "", "Transaction must be ALLOWED")), // 107

                () -> testTransaction(johndoe3, transactionApi, "POST", 200, corr3Reg,
                        "MANUAL_PROCESSING",  "region-correlation",
                        new TestHint(transactionApi, "", "Transaction must be MANUAL_PROCESSING" +
                                " due to - region correlation rule")), // 108

                () -> testTransaction(johndoe3, transactionApi, "POST", 200, corr4Reg,
                        "PROHIBITED",  "region-correlation",
                        new TestHint(transactionApi, "", "Transaction must be PROHIBITED" +
                                " due to - region correlation rule")), // 109

                () -> testAddCard(johndoe2, 200, "4000008449433403",
                        new TestHint(cardApi, "", "A card must be added to Black List")), // 110

                () -> testAddIP(johndoe2, 200, "192.168.1.2",
                        new TestHint(ipApi, "", "IP must be added to Black List")), // 111

                () -> testTransaction(johndoe3, transactionApi, "POST", 200, corr5Reg,
                        "PROHIBITED",  "amount, card-number, ip, region-correlation",
                        new TestHint(transactionApi, "", "Transaction must be PROHIBITED" +
                                " due to - amount, card-number, ip, region-correlation reasons")), // 112

                () -> testDeleteCard(johndoe2, 200, "4000008449433403",
                        new TestHint(cardApi, "", "Card must be removed from Black List")), // 113

                () -> testTransaction(johndoe3, transactionApi, "POST", 200, corr3IP,
                        "MANUAL_PROCESSING",  "ip-correlation",
                        new TestHint(transactionApi, "", "Transaction must be MANUAL_PROCESSING" +
                                " due to - ip correlation rule")), // 114

        };
    }
  learner_created: false
- name: src/antifraud/handler/AntiFraudExceptionHandler.java
  visible: true
  text: |
    package antifraud.handler;

    import antifraud.domain.AntiFraudCustomErrorMessage;
    import antifraud.exception.*;
    import org.springframework.http.HttpStatus;
    import org.springframework.http.ResponseEntity;
    import org.springframework.web.bind.MethodArgumentNotValidException;
    import org.springframework.web.bind.annotation.ControllerAdvice;
    import org.springframework.web.bind.annotation.ExceptionHandler;

    import javax.servlet.http.HttpServletRequest;
    import java.time.LocalDateTime;

    @ControllerAdvice
    public class AntiFraudExceptionHandler {

        @ExceptionHandler({MethodArgumentNotValidException.class})
        public ResponseEntity<AntiFraudCustomErrorMessage> handleValidationError(MethodArgumentNotValidException e,
                                                                                 HttpServletRequest request) {
            AntiFraudCustomErrorMessage body = AntiFraudCustomErrorMessage.builder()
                    .timestamp(LocalDateTime.now().toString())
                    .status(HttpStatus.BAD_REQUEST.value())
                    .error(HttpStatus.BAD_REQUEST.getReasonPhrase())
                    .message(e.getBindingResult().getAllErrors().get(0).getDefaultMessage())
                    .path(request.getRequestURI())
                    .build();
            return new ResponseEntity<>(body, HttpStatus.BAD_REQUEST);
        }

        @ExceptionHandler({UserAlreadyExistException.class, AddressAlreadyExistException.class, CardAlreadyExistException.class})
        public ResponseEntity<AntiFraudCustomErrorMessage> handleConflict(Exception exception, HttpServletRequest request) {
            AntiFraudCustomErrorMessage body = AntiFraudCustomErrorMessage.builder()
                    .timestamp(LocalDateTime.now().toString())
                    .status(HttpStatus.CONFLICT.value())
                    .error(HttpStatus.CONFLICT.getReasonPhrase())
                    .message(exception.getMessage())
                    .path(request.getRequestURI())
                    .build();
            return new ResponseEntity<>(body, HttpStatus.CONFLICT);
        }

        @ExceptionHandler({UserNotFoundException.class, AddressNotFoundException.class, CardNotFoundException.class})
        public ResponseEntity<AntiFraudCustomErrorMessage> handleNotFound(Exception exception, HttpServletRequest httpServletRequest) {
            AntiFraudCustomErrorMessage body = AntiFraudCustomErrorMessage.builder()
                    .timestamp(LocalDateTime.now().toString())
                    .status(HttpStatus.NOT_FOUND.value())
                    .error(HttpStatus.NOT_FOUND.getReasonPhrase())
                    .message(exception.getMessage())
                    .path(httpServletRequest.getRequestURI())
                    .build();
            return new ResponseEntity<>(body, HttpStatus.NOT_FOUND);
        }

        @ExceptionHandler({RoleUpdateException.class})
        public ResponseEntity<AntiFraudCustomErrorMessage> handleRoleException(RoleUpdateException e, HttpServletRequest request) {
            AntiFraudCustomErrorMessage body = AntiFraudCustomErrorMessage.builder()
                    .timestamp(LocalDateTime.now().toString())
                    .status(HttpStatus.BAD_REQUEST.value())
                    .error(HttpStatus.BAD_REQUEST.getReasonPhrase())
                    .message(e.getMessage())
                    .path(request.getRequestURI())
                    .build();
            return new ResponseEntity<>(body, HttpStatus.BAD_REQUEST);
        }
    }
  learner_created: true
- name: src/antifraud/exception/AddressNotFoundException.java
  visible: true
  text: |
    package antifraud.exception;

    public class AddressNotFoundException extends Exception {

        public AddressNotFoundException(String message) {
            super(message);
        }
    }
  learner_created: true
- name: src/antifraud/exception/RoleUpdateException.java
  visible: true
  text: |
    package antifraud.exception;

    public class RoleUpdateException extends Exception {

        public RoleUpdateException(String message) {
            super(message);
        }
    }
  learner_created: true
- name: src/antifraud/model/User.java
  visible: true
  text: |
    package antifraud.model;

    import antifraud.domain.UserRole;
    import lombok.*;
    import org.hibernate.Hibernate;

    import javax.persistence.*;
    import javax.validation.constraints.NotEmpty;
    import java.util.Objects;
    import java.util.Set;

    @Getter
    @Setter
    @AllArgsConstructor
    @RequiredArgsConstructor
    @Entity
    @Table(name = "users")
    @SequenceGenerator(name = "sequence", sequenceName = "UserSeq")
    public class User {

        @Id
        @Column(name = "user_id")
        @GeneratedValue(strategy = GenerationType.SEQUENCE, generator = "sequence")
        private Long id;
        @NotEmpty(message = "name must not be empty")
        private String name;
        @NotEmpty(message = "username must not be empty")
        private String username;
        @NotEmpty(message = "password must not be empty")
        private String password;

        @Enumerated(EnumType.STRING)
        private UserRole role;

        private boolean accountNonLocked;

        @OneToMany(mappedBy="user", orphanRemoval = true)
        private Set<Transaction> transactions;

        @Override
        public boolean equals(Object o) {
            if (this == o) return true;
            if (o == null || Hibernate.getClass(this) != Hibernate.getClass(o)) return false;
            User user = (User) o;
            return id != null && Objects.equals(id, user.id);
        }

        @Override
        public int hashCode() {
            return getClass().hashCode();
        }

        public boolean isAdmin() {
            return UserRole.ROLE_ADMINISTRATOR.equals(role);
        }
    }
  learner_created: true
- name: src/antifraud/domain/RoleChangeRequest.java
  visible: true
  text: |
    package antifraud.domain;

    import lombok.AllArgsConstructor;
    import lombok.Data;
    import lombok.RequiredArgsConstructor;

    import javax.validation.constraints.AssertTrue;
    import javax.validation.constraints.NotEmpty;

    import java.util.function.Predicate;

    import static antifraud.domain.UserRole.*;

    @Data
    @AllArgsConstructor
    @RequiredArgsConstructor
    public class RoleChangeRequest {

        @NotEmpty(message = "username must not be empty")
        private String username;
        @NotEmpty(message = "role must not be empty")
        private String role;

        @AssertTrue(message = "Role must be SUPPORT or MERCHANT")
        public boolean isValidRole() {
            return isNotAdminRole().test(role);
        }

        private Predicate<String> isNotAdminRole() {
            return role -> ROLE_SUPPORT.getDescription().equals(role) || ROLE_MERCHANT.getDescription().equals(role);
        }
    }
  learner_created: true
- name: src/antifraud/domain/UserRole.java
  visible: true
  text: |
    package antifraud.domain;

    public enum UserRole {

        ROLE_MERCHANT("MERCHANT"),
        ROLE_ADMINISTRATOR("ADMINISTRATOR"),
        ROLE_SUPPORT("SUPPORT");

        private final String description;

        UserRole(String description) {
            this.description = description;
        }

        public String getDescription() {
            return description;
        }
    }
  learner_created: true
- name: src/antifraud/domain/TransactionValidationResult.java
  visible: true
  text: |
    package antifraud.domain;

    public enum TransactionValidationResult {

        ALLOWED(0, 200),
        MANUAL_PROCESSING(200, 1500),
        PROHIBITED(1500, Integer.MAX_VALUE);

        private final int lower;
        private final int upper;

        TransactionValidationResult(int lower, int upper) {
            this.lower = lower;
            this.upper = upper;
        }

        public int getLower() {
            return lower;
        }

        public int getUpper() {
            return upper;
        }
    }
  learner_created: true
- name: src/antifraud/domain/TransactionResponse.java
  visible: true
  text: |
    package antifraud.domain;

    import lombok.*;

    @Data
    @Builder
    @RequiredArgsConstructor
    @AllArgsConstructor
    public class TransactionResponse {

        private TransactionValidationResult result;

        private String info;
    }
  learner_created: true
- name: src/antifraud/domain/AntiFraudCustomErrorMessage.java
  visible: true
  text: |
    package antifraud.domain;

    import lombok.*;

    @Builder
    @Data
    @AllArgsConstructor
    @RequiredArgsConstructor
    public class AntiFraudCustomErrorMessage {

        private String timestamp;
        private int status;
        private String error;
        private String message;
        private String path;
    }
  learner_created: true
- name: src/antifraud/domain/UserDto.java
  visible: true
  text: |
    package antifraud.domain;

    import lombok.*;

    @Data
    @Builder
    @RequiredArgsConstructor
    @AllArgsConstructor
    public class UserDto {

        private Long id;
        private String name;
        private String username;
        private String role;
    }
  learner_created: true
- name: src/antifraud/domain/AddressDeletionResponse.java
  visible: true
  text: |
    package antifraud.domain;

    import lombok.AllArgsConstructor;
    import lombok.Builder;
    import lombok.Data;
    import lombok.RequiredArgsConstructor;

    @Data
    @Builder
    @RequiredArgsConstructor
    @AllArgsConstructor
    public class AddressDeletionResponse {

        private String status;
    }
  learner_created: true
- name: src/antifraud/controller/AddressController.java
  visible: true
  text: |
    package antifraud.controller;

    import antifraud.domain.AddressDeletionResponse;
    import antifraud.exception.AddressAlreadyExistException;
    import antifraud.exception.AddressNotFoundException;
    import antifraud.model.Address;
    import antifraud.service.AddressService;
    import antifraud.util.AntiFraudValidator;
    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.http.MediaType;
    import org.springframework.http.ResponseEntity;
    import org.springframework.validation.annotation.Validated;
    import org.springframework.web.bind.annotation.*;

    import javax.validation.Valid;
    import java.util.List;

    @RestController
    @RequestMapping(path = "/api/antifraud/suspicious-ip", produces = MediaType.APPLICATION_JSON_VALUE)
    @Validated
    public class AddressController {

        private final AddressService addressService;

        @Autowired
        public AddressController(AddressService addressService) {
            this.addressService = addressService;
        }

        @PostMapping(consumes = MediaType.APPLICATION_JSON_VALUE)
        public ResponseEntity<Address> create(@Valid @RequestBody Address address) throws AddressAlreadyExistException {
            return ResponseEntity.ok(addressService.create(address));
        }

        @DeleteMapping("/{ip}")
        public ResponseEntity<AddressDeletionResponse> delete(@PathVariable String ip) throws AddressNotFoundException {
            if (AntiFraudValidator.isValidIP().negate().test(ip)) {
                return ResponseEntity.badRequest().build();
            }
            return ResponseEntity.ok(addressService.removeIP(ip));
        }

        @GetMapping
        public ResponseEntity<List<Address>> fetch() {
            return ResponseEntity.ok(addressService.findAll());
        }
    }
  learner_created: true
- name: src/antifraud/controller/CardController.java
  visible: true
  text: |
    package antifraud.controller;

    import antifraud.domain.CardDeletionResponse;
    import antifraud.exception.CardAlreadyExistException;
    import antifraud.exception.CardNotFoundException;
    import antifraud.model.Card;
    import antifraud.service.CardService;
    import antifraud.util.AntiFraudValidator;
    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.http.HttpStatus;
    import org.springframework.http.MediaType;
    import org.springframework.http.ResponseEntity;
    import org.springframework.validation.annotation.Validated;
    import org.springframework.web.bind.annotation.*;

    import javax.validation.Valid;
    import java.util.List;

    @RestController
    @RequestMapping(path = "/api/antifraud/stolencard", produces = MediaType.APPLICATION_JSON_VALUE)
    @Validated
    public class CardController {

        private final CardService cardService;

        @Autowired
        public CardController(CardService cardService) {
            this.cardService = cardService;
        }

        @PostMapping(consumes = MediaType.APPLICATION_JSON_VALUE)
        public ResponseEntity<Card> create(@Valid @RequestBody Card card) throws CardAlreadyExistException {
            return ResponseEntity.ok(cardService.create(card));
        }

        @DeleteMapping("/{number}")
        public ResponseEntity<CardDeletionResponse> delete(@PathVariable String number) throws CardNotFoundException {
            if (AntiFraudValidator.isValidNumber().negate().test(number)) {
                return ResponseEntity.badRequest().build();
            }
            return ResponseEntity.ok(cardService.removeByNumber(number));
        }

        @GetMapping
        public ResponseEntity<List<Card>> fetch() {
            return ResponseEntity.ok(cardService.findAll());
        }
    }
  learner_created: true
- name: src/antifraud/controller/TransactionController.java
  visible: true
  text: |
    package antifraud.controller;

    import antifraud.domain.TransactionResponse;
    import antifraud.exception.UserNotFoundException;
    import antifraud.model.Transaction;
    import antifraud.service.TransactionService;
    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.http.MediaType;
    import org.springframework.http.ResponseEntity;
    import org.springframework.validation.annotation.Validated;
    import org.springframework.web.bind.annotation.PostMapping;
    import org.springframework.web.bind.annotation.RequestBody;
    import org.springframework.web.bind.annotation.RequestMapping;
    import org.springframework.web.bind.annotation.RestController;

    import javax.validation.Valid;

    @RestController
    @RequestMapping(path = "/api/antifraud", produces = MediaType.APPLICATION_JSON_VALUE)
    @Validated
    public class TransactionController {

        public final TransactionService transactionService;

        @Autowired
        public TransactionController(TransactionService transactionService) {
            this.transactionService = transactionService;
        }

        @PostMapping("/transaction")
        public ResponseEntity<TransactionResponse> process(@Valid @RequestBody Transaction transaction) throws UserNotFoundException {
            return ResponseEntity.ok(transactionService.validate(transaction));
        }
    }
  learner_created: true
- name: src/antifraud/domain/AccessUpdateRequest.java
  visible: true
  text: |
    package antifraud.domain;

    import lombok.AllArgsConstructor;
    import lombok.Data;
    import lombok.RequiredArgsConstructor;

    import javax.validation.constraints.AssertTrue;
    import javax.validation.constraints.NotEmpty;

    @Data
    @RequiredArgsConstructor
    @AllArgsConstructor
    public class AccessUpdateRequest {

        @NotEmpty(message = "username must not be mepty")
        private String username;
        @NotEmpty(message = "operation must not be empty")
        private String operation;

        @AssertTrue(message = "LOCK or UNLOCK operation supported")
        public boolean isValidOperation() {
            return "LOCK".equals(operation) || "UNLOCK".equals(operation);
        }
    }
  learner_created: true
- name: src/antifraud/auth/RestAuthenticationEntryPoint.java
  visible: true
  text: |
    package antifraud.auth;

    import org.springframework.security.core.AuthenticationException;
    import org.springframework.security.web.AuthenticationEntryPoint;
    import org.springframework.stereotype.Component;

    import javax.servlet.ServletException;
    import javax.servlet.http.HttpServletRequest;
    import javax.servlet.http.HttpServletResponse;
    import java.io.IOException;

    @Component
    public class RestAuthenticationEntryPoint implements AuthenticationEntryPoint {

        @Override
        public void commence(HttpServletRequest request, HttpServletResponse response, AuthenticationException authException) throws IOException, ServletException {
            response.sendError(HttpServletResponse.SC_UNAUTHORIZED, authException.getMessage());
        }
    }
  learner_created: true
- name: src/antifraud/auth/UserDetailsImpl.java
  visible: true
  text: |
    package antifraud.auth;

    import antifraud.model.User;
    import org.springframework.security.core.GrantedAuthority;
    import org.springframework.security.core.authority.SimpleGrantedAuthority;
    import org.springframework.security.core.userdetails.UserDetails;

    import java.util.Collection;
    import java.util.List;

    public class UserDetailsImpl implements UserDetails {

        private final String username;
        private final String password;
        private final boolean accountNonLocked;
        private final List<GrantedAuthority> rolesAndAuthorities;

        public UserDetailsImpl(User user) {
            this.username = user.getUsername();
            this.password = user.getPassword();
            this.accountNonLocked = user.isAccountNonLocked();
            this.rolesAndAuthorities = List.of(new SimpleGrantedAuthority(user.getRole().name()));
        }

        @Override
        public Collection<? extends GrantedAuthority> getAuthorities() {
            return rolesAndAuthorities;
        }

        @Override
        public String getPassword() {
            return password;
        }

        @Override
        public String getUsername() {
            return username;
        }

        @Override
        public boolean isAccountNonExpired() {
            return true;
        }

        @Override
        public boolean isAccountNonLocked() {
            return accountNonLocked;
        }

        @Override
        public boolean isCredentialsNonExpired() {
            return true;
        }

        @Override
        public boolean isEnabled() {
            return true;
        }
    }
  learner_created: true
- name: src/antifraud/auth/SecurityConfig.java
  visible: true
  text: |
    package antifraud.auth;

    import antifraud.handler.AntiFraudAccessDeniedHandler;
    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.context.annotation.Bean;
    import org.springframework.context.annotation.Configuration;
    import org.springframework.http.HttpMethod;
    import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
    import org.springframework.security.config.annotation.web.builders.HttpSecurity;
    import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;
    import org.springframework.security.config.http.SessionCreationPolicy;
    import org.springframework.security.core.userdetails.UserDetailsService;
    import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
    import org.springframework.security.crypto.password.PasswordEncoder;

    import static antifraud.domain.UserRole.*;

    @Configuration
    public class SecurityConfig extends WebSecurityConfigurerAdapter {

        private static final int ENCODER_STRENGTH = 13;
        private final UserDetailsService userDetailsService;
        private final RestAuthenticationEntryPoint restAuthenticationEntryPoint;
        private final AntiFraudAccessDeniedHandler accessDeniedHandler;


        @Autowired
        public SecurityConfig(UserDetailsService userDetailsService,
                              RestAuthenticationEntryPoint restAuthenticationEntryPoint, AntiFraudAccessDeniedHandler accessDeniedHandler) {
            this.userDetailsService = userDetailsService;
            this.restAuthenticationEntryPoint = restAuthenticationEntryPoint;
            this.accessDeniedHandler = accessDeniedHandler;
        }

        @Override
        protected void configure(AuthenticationManagerBuilder auth) throws Exception {
            auth
                    .userDetailsService(userDetailsService)
                    .passwordEncoder(getEncoder());
        }

        public void configure(HttpSecurity http) throws Exception {
            http
                    .exceptionHandling().accessDeniedHandler(accessDeniedHandler)
                    .and()
                    .httpBasic()
                    .authenticationEntryPoint(restAuthenticationEntryPoint) // Handles auth error
                    .and()
                    .csrf().disable().headers().frameOptions().disable() // for Postman, the H2 console
                    .and()
                    .authorizeRequests() // manage access
                    .mvcMatchers(HttpMethod.GET, "/api/auth/list").hasAnyRole(ROLE_ADMINISTRATOR.getDescription(), ROLE_SUPPORT.getDescription())
                    .mvcMatchers(HttpMethod.POST, "/api/antifraud/transaction").hasRole(ROLE_MERCHANT.getDescription())
                    .mvcMatchers("/api/antifraud/suspicious-ip", "/api/antifraud/suspicious-ip/**", "/api/antifraud/stolencard", "/api/antifraud/stolencard/**").hasRole(ROLE_SUPPORT.getDescription())
                    .mvcMatchers(HttpMethod.PUT, "/api/auth/access", "/api/auth/role").hasRole(ROLE_ADMINISTRATOR.getDescription())
                    .mvcMatchers(HttpMethod.DELETE, "/api/auth/**").hasRole(ROLE_ADMINISTRATOR.getDescription())
                    .antMatchers(HttpMethod.POST, "/api/auth/user").permitAll()
                    .antMatchers("/actuator/shutdown").permitAll() // needs to run test
                    // other matchers
                    .and()
                    .sessionManagement()
                    .sessionCreationPolicy(SessionCreationPolicy.STATELESS); // no session
        }

        @Bean
        public PasswordEncoder getEncoder() {
            return new BCryptPasswordEncoder(ENCODER_STRENGTH);
        }
    }
  learner_created: true
- name: src/antifraud/service/TransactionService.java
  visible: true
  text: |
    package antifraud.service;

    import antifraud.domain.TransactionResponse;
    import antifraud.exception.UserNotFoundException;
    import antifraud.model.Transaction;

    public interface TransactionService {

        TransactionResponse validate(Transaction transaction) throws UserNotFoundException;
    }
  learner_created: true
- name: src/antifraud/controller/UserController.java
  visible: true
  text: |
    package antifraud.controller;

    import antifraud.domain.*;
    import antifraud.exception.RoleUpdateException;
    import antifraud.exception.UserAlreadyExistException;
    import antifraud.exception.UserNotFoundException;
    import antifraud.model.User;
    import antifraud.service.UserService;
    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.http.HttpStatus;
    import org.springframework.http.MediaType;
    import org.springframework.http.ResponseEntity;
    import org.springframework.security.crypto.password.PasswordEncoder;
    import org.springframework.validation.annotation.Validated;
    import org.springframework.web.bind.annotation.*;

    import javax.validation.Valid;
    import java.util.List;

    @RestController
    @RequestMapping(path = "/api/auth", produces = MediaType.APPLICATION_JSON_VALUE)
    @Validated
    public class UserController {

        private final UserService userService;
        private final PasswordEncoder encoder;

        @Autowired
        public UserController(UserService userService, PasswordEncoder encoder) {
            this.userService = userService;
            this.encoder = encoder;
        }

        @PostMapping("/user")
        public ResponseEntity<UserDto> create(@Valid @RequestBody User user) throws UserAlreadyExistException {
            user.setPassword(encoder.encode(user.getPassword()));
            return new ResponseEntity<>(userService.create(user), HttpStatus.CREATED);
        }

        @GetMapping("/list")
        public ResponseEntity<List<UserDto>> fetchAll() {
            return ResponseEntity.ok(userService.findAll());
        }

        @DeleteMapping("/user/{username}")
        public ResponseEntity<UserDeletionResponse> remove(@PathVariable String username) throws UserNotFoundException {
            return ResponseEntity.ok(userService.remove(username));
        }

        @PutMapping("/role")
        public ResponseEntity<UserDto> changeRole(@Valid @RequestBody RoleChangeRequest request)
                throws UserNotFoundException, RoleUpdateException, UserAlreadyExistException {
            return ResponseEntity.ok(userService.update(request));
        }

        @PutMapping("/access")
        public ResponseEntity<AccessUpdateResponse> updateAccess(@Valid @RequestBody AccessUpdateRequest request)
                throws UserNotFoundException, RoleUpdateException {
            return ResponseEntity.ok(userService.updateAccess(request));
        }
    }
  learner_created: true
- name: src/antifraud/service/TransactionServiceImpl.java
  visible: true
  text: |
    package antifraud.service;

    import antifraud.domain.TransactionResponse;
    import antifraud.domain.TransactionValidationResult;
    import antifraud.exception.UserNotFoundException;
    import antifraud.model.Transaction;
    import antifraud.repository.TransactionRepository;
    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.security.core.Authentication;
    import org.springframework.security.core.context.SecurityContextHolder;
    import org.springframework.security.core.userdetails.UserDetails;
    import org.springframework.stereotype.Service;

    import javax.transaction.Transactional;

    import static antifraud.domain.TransactionValidationResult.*;

    @Service
    public class TransactionServiceImpl implements TransactionService {

        private final TransactionRepository transactionRepository;
        private final UserServiceImpl userService;
        private final AddressService addressService;
        private final CardService cardService;

        @Autowired
        public TransactionServiceImpl(TransactionRepository transactionRepository, UserServiceImpl userService, AddressService addressService, CardService cardService) {
            this.transactionRepository = transactionRepository;
            this.userService = userService;
            this.addressService = addressService;
            this.cardService = cardService;
        }

        @Override
        @Transactional
        public TransactionResponse validate(Transaction transaction) throws UserNotFoundException {
            Authentication auth = SecurityContextHolder.getContext().getAuthentication();
            String username;

            if (auth != null) {
                username = ((UserDetails) auth.getPrincipal()).getUsername();
                transaction.setUser(userService.findByUsername(username).orElseThrow(() -> new UserNotFoundException("User not found!")));
            }

            var address = addressService.findByIP(transaction.getIp());
            var card = cardService.findByNUmber(transaction.getNumber());

            final Long amount = transaction.getAmount();
            String reason;
            var result = getResult(amount);

            switch (result) {
                case ALLOWED:
                    if (card.isPresent() && address.isPresent()) {
                        result = PROHIBITED;
                        reason = "card-number, ip";
                    } else if (card.isPresent()) {
                        result = PROHIBITED;
                        reason = "card-number";
                    } else if (address.isPresent()) {
                        result = PROHIBITED;
                        reason = "ip";
                    } else {
                        reason = "none";
                    }

                    transaction.setStatus(result);
                    transactionRepository.save(transaction);
                    return TransactionResponse.builder().result(result).info(reason).build();

                case PROHIBITED:
                    if (card.isPresent() && address.isPresent()) {
                        reason = "amount, card-number, ip";
                    }else if (card.isPresent()) {
                        reason = "amount, card-number";
                    } else if (address.isPresent()) {
                        reason = "amount, ip";
                    } else {
                        reason = "amount";
                    }

                    transaction.setStatus(result);
                    transactionRepository.save(transaction);
                    return TransactionResponse.builder().result(result).info(reason).build();

                case MANUAL_PROCESSING:

                    if (card.isPresent() && address.isPresent()) {
                        result = PROHIBITED;
                        reason = "amount, card-number, ip";
                    } else if (card.isPresent()) {
                        result = PROHIBITED;
                        reason = "card-number";
                    } else if (address.isPresent()) {
                        result = PROHIBITED;
                        reason = "ip";
                    } else {
                        reason = "amount";
                    }

                    transaction.setStatus(result);
                    transactionRepository.save(transaction);
                    return TransactionResponse.builder().result(result).info(reason).build();
                default:
                    throw new IllegalStateException("Unexpected value: " + result);
            }
        }

        private TransactionValidationResult getResult(Long amount) {
            if (amount > ALLOWED.getLower() && amount <= ALLOWED.getUpper()) {
                return ALLOWED;
            } else if (amount >= ALLOWED.getUpper() && amount <= PROHIBITED.getLower()) {
                return MANUAL_PROCESSING;
            } else {
               return PROHIBITED;
            }
        }
    }
  learner_created: true
- name: src/antifraud/model/Transaction.java
  visible: true
  text: |
    package antifraud.model;

    import antifraud.domain.TransactionValidationResult;
    import antifraud.util.AntiFraudValidator;
    import com.fasterxml.jackson.annotation.JsonIgnore;
    import com.fasterxml.jackson.annotation.JsonProperty;
    import lombok.*;
    import org.hibernate.Hibernate;
    import org.hibernate.annotations.OnDelete;
    import org.hibernate.annotations.OnDeleteAction;

    import javax.persistence.*;
    import javax.validation.constraints.AssertTrue;
    import javax.validation.constraints.NotEmpty;
    import javax.validation.constraints.NotNull;
    import java.util.Objects;

    @Getter
    @Setter
    @ToString
    @RequiredArgsConstructor
    @AllArgsConstructor
    @Entity
    @Table(name = "transactions")
    @SequenceGenerator(name = "transaction_sequence", sequenceName = "TransactionSequence")
    public class Transaction {

        @Id
        @GeneratedValue(strategy = GenerationType.SEQUENCE, generator = "transaction_sequence")
        private Long id;

        @NotNull
        private Long amount;

        @Enumerated(EnumType.STRING)
        private TransactionValidationResult status;

        @NotEmpty
        private String ip;

        @NotEmpty
        private String number;

        @ManyToOne
        @OnDelete(action = OnDeleteAction.CASCADE)
        @JoinColumn(name = "user_id")
        private User user;

        @AssertTrue(message = "The transaction amount must be greater than 0")
        public boolean isNonNegativeAmount() {
            return amount != null && amount > 0;
        }

        @AssertTrue(message = "ip address is not valid")
        @JsonIgnore
        public boolean isValidIp() {
            return ip != null && AntiFraudValidator.isValidIP().test(ip);
        }

        @AssertTrue(message = "Invalid card number in request!")
        @JsonIgnore
        public boolean isValid() {
            return number != null && AntiFraudValidator.isValidNumber().test(number);
        }

        @Override
        public boolean equals(Object o) {
            if (this == o) return true;
            if (o == null || Hibernate.getClass(this) != Hibernate.getClass(o)) return false;
            Transaction that = (Transaction) o;
            return id != null && Objects.equals(id, that.id);
        }

        @Override
        public int hashCode() {
            return getClass().hashCode();
        }
    }
  learner_created: true
- name: src/antifraud/util/AntiFraudValidator.java
  visible: true
  text: |
    package antifraud.util;

    import java.util.function.Predicate;

    public class AntiFraudValidator {

        private transient static final String IPV4_PATTERN =
                "^([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\." +
                        "([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\." +
                        "([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\." +
                        "([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$";

        public static Predicate<String> isValidIP() {
            return ip -> ip.matches(IPV4_PATTERN);
        }

        public static Predicate<String> isValidNumber() {
            return number -> {
                int checkSum = Integer.parseInt(String.valueOf(number.charAt(number.length() - 1)));

                for (int i = 0; i < number.length() - 1; i++) {
                    int digit = Integer.parseInt(String.valueOf(number.charAt(i)));

                    if (i % 2 == 0) {
                        digit = digit * 2;

                        if (digit > 9) {
                            digit = digit - 9;
                        }
                    }
                    checkSum += digit;
                }

                return checkSum % 10 == 0;
            };
        }
    }
  learner_created: true
- name: src/antifraud/repository/UserRepository.java
  visible: true
  text: |
    package antifraud.repository;

    import antifraud.model.User;
    import org.springframework.data.repository.CrudRepository;

    import java.util.List;
    import java.util.Optional;

    public interface UserRepository extends CrudRepository<User, Long> {

        Optional<User> findUsersByUsernameIgnoreCase(String name);
        List<User> findAll();
    }
  learner_created: true
- name: src/antifraud/exception/CardNotFoundException.java
  visible: true
  text: |
    package antifraud.exception;

    public class CardNotFoundException extends Exception {
        public CardNotFoundException(String message) {
            super(message);
        }
    }
  learner_created: true
- name: src/antifraud/exception/CardAlreadyExistException.java
  visible: true
  text: |
    package antifraud.exception;

    public class CardAlreadyExistException extends Exception {
        public CardAlreadyExistException(String message) {
            super(message);
        }
    }
  learner_created: true
- name: src/antifraud/model/Card.java
  visible: true
  text: |
    package antifraud.model;

    import antifraud.util.AntiFraudValidator;
    import com.fasterxml.jackson.annotation.JsonIgnore;
    import lombok.*;
    import org.hibernate.Hibernate;

    import javax.persistence.*;
    import javax.validation.constraints.AssertTrue;
    import javax.validation.constraints.NotEmpty;
    import java.util.Objects;

    @Getter
    @Setter
    @ToString
    @AllArgsConstructor
    @RequiredArgsConstructor
    @Entity
    @SequenceGenerator(name = "card_sequence", sequenceName = "CardSequence")
    public class Card {

        @Id
        @GeneratedValue(strategy = GenerationType.SEQUENCE, generator = "card_sequence")
        @Column(name = "card_id")
        private Long id;

        @NotEmpty
        private String number;

        @Override
        public boolean equals(Object o) {
            if (this == o) return true;
            if (o == null || Hibernate.getClass(this) != Hibernate.getClass(o)) return false;
            Card card = (Card) o;
            return id != null && Objects.equals(id, card.id);
        }

        @AssertTrue(message = "Invalid card number in request!")
        @JsonIgnore
        public boolean isValid() {
            return number != null && AntiFraudValidator.isValidNumber().test(number);
        }

        @Override
        public int hashCode() {
            return getClass().hashCode();
        }
    }
  learner_created: true
- name: src/antifraud/service/UserDetailsServiceImpl.java
  visible: true
  text: |
    package antifraud.service;

    import antifraud.auth.UserDetailsImpl;
    import antifraud.model.User;
    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.security.core.userdetails.UserDetails;
    import org.springframework.security.core.userdetails.UserDetailsService;
    import org.springframework.security.core.userdetails.UsernameNotFoundException;
    import org.springframework.stereotype.Service;

    import java.util.Optional;

    @Service
    public class UserDetailsServiceImpl implements UserDetailsService {

        private final UserServiceImpl userService;

        @Autowired
        public UserDetailsServiceImpl(UserServiceImpl userService) {
            this.userService = userService;
        }

        @Override
        public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {
            Optional<User> user = userService.findByUsername(username);
            if (user.isPresent()) {
                return new UserDetailsImpl(user.get());
            } else {
                throw new UsernameNotFoundException("Not found " + username);
            }
        }
    }
  learner_created: true
- name: src/antifraud/service/UserServiceImpl.java
  visible: true
  text: |
    package antifraud.service;

    import antifraud.domain.*;
    import antifraud.exception.RoleUpdateException;
    import antifraud.exception.UserAlreadyExistException;
    import antifraud.exception.UserNotFoundException;
    import antifraud.mapper.UserMapper;
    import antifraud.model.User;
    import antifraud.repository.UserRepository;
    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.security.core.userdetails.UsernameNotFoundException;
    import org.springframework.stereotype.Service;

    import javax.transaction.Transactional;
    import java.util.List;
    import java.util.Optional;

    import static antifraud.domain.UserRole.*;

    @Service
    public class UserServiceImpl implements UserService {

        private final UserRepository userRepository;
        private final UserMapper userMapper;

        @Autowired
        public UserServiceImpl(UserRepository userRepository, UserMapper userMapper) {
            this.userRepository = userRepository;
            this.userMapper = userMapper;
        }

        @Override
        @Transactional
        public UserDto create(User user) throws UserAlreadyExistException {

            var count = userRepository.count();

            if (count <= 0) {
                user.setAccountNonLocked(true);
                user.setRole(ROLE_ADMINISTRATOR);
            } else {
                var userFromRepo = userRepository.findUsersByUsernameIgnoreCase(user.getUsername());

                if (userFromRepo.isPresent()) {
                    throw new UserAlreadyExistException("User already exist!");
                }

                user.setRole(ROLE_MERCHANT);

            }

            return userMapper.toDto(userRepository.save(user));
        }

        @Override
        public Optional<User> findByUsername(String name) throws UsernameNotFoundException {
            return userRepository.findUsersByUsernameIgnoreCase(name);
        }

        @Override
        public List<UserDto> findAll() {
            return userMapper.toList(userRepository.findAll());
        }

        @Override
        @Transactional
        public UserDeletionResponse remove(String username) throws UserNotFoundException {
            User user = userRepository.findUsersByUsernameIgnoreCase(username).orElseThrow(() -> new UserNotFoundException("User not found"));
            userRepository.delete(user);
            return UserDeletionResponse.builder().status(UserDeletionResponse.DEFAULT_STATUS).username(username).build();
        }

        @Override
        @Transactional
        public UserDto update(RoleChangeRequest request) throws UserNotFoundException, RoleUpdateException, UserAlreadyExistException {

            User user = userRepository.findUsersByUsernameIgnoreCase(request.getUsername())
                    .orElseThrow(() -> new UserNotFoundException("User not found!"));

            if (user.isAdmin()) {
                throw new RoleUpdateException("User can have only one role");
            }

            if (user.getRole().getDescription().equals(request.getRole())) {
                throw new UserAlreadyExistException("User already has the role");
            }

            user.setRole(UserRole.valueOf("ROLE_" + request.getRole()));
            user = userRepository.save(user);

            return userMapper.toDto(user);
        }

        @Override
        @Transactional
        public AccessUpdateResponse updateAccess(AccessUpdateRequest request) throws UserNotFoundException, RoleUpdateException {

            User user = userRepository.findUsersByUsernameIgnoreCase(request.getUsername()).orElseThrow(() -> new UserNotFoundException("User not found"));

            if (user.isAdmin()) {
                throw new RoleUpdateException(String.format("%s cannot be blocked", ROLE_ADMINISTRATOR.getDescription()));
            }

            final String operation = request.getOperation();
            user.setAccountNonLocked(!"LOCK".equals(operation));

            user = userRepository.save(user);

            return AccessUpdateResponse.builder()
                    .status(String.format("User %s %sed!", user.getUsername(), operation.toLowerCase()))
                    .build();
        }
    }
  learner_created: true
- name: src/antifraud/service/UserService.java
  visible: true
  text: |
    package antifraud.service;

    import antifraud.domain.*;
    import antifraud.exception.RoleUpdateException;
    import antifraud.exception.UserAlreadyExistException;
    import antifraud.exception.UserNotFoundException;
    import antifraud.model.User;

    import java.util.List;
    import java.util.Optional;

    public interface UserService {

        UserDto create(User user) throws UserAlreadyExistException;

        Optional<User> findByUsername(String name);

        List<UserDto> findAll();

        UserDeletionResponse remove(String username) throws UserNotFoundException;

        UserDto update(RoleChangeRequest request) throws UserNotFoundException, RoleUpdateException, UserAlreadyExistException;

        AccessUpdateResponse updateAccess(AccessUpdateRequest request) throws UserNotFoundException, RoleUpdateException;
    }
  learner_created: true
- name: src/antifraud/exception/AddressAlreadyExistException.java
  visible: true
  text: |
    package antifraud.exception;

    public class AddressAlreadyExistException extends Exception {

        public AddressAlreadyExistException(String message) {
            super(message);
        }
    }
  learner_created: true
- name: src/antifraud/handler/AntiFraudAccessDeniedHandler.java
  visible: true
  text: |
    package antifraud.handler;

    import org.springframework.http.HttpStatus;
    import org.springframework.security.access.AccessDeniedException;
    import org.springframework.security.core.Authentication;
    import org.springframework.security.core.context.SecurityContextHolder;
    import org.springframework.security.web.access.AccessDeniedHandler;
    import org.springframework.stereotype.Component;

    import javax.servlet.http.HttpServletRequest;
    import javax.servlet.http.HttpServletResponse;
    import java.io.IOException;

    @Component
    public class AntiFraudAccessDeniedHandler implements AccessDeniedHandler {

        @Override
        public void handle(HttpServletRequest request, HttpServletResponse response, AccessDeniedException accessDeniedException) throws IOException {
            Authentication auth = SecurityContextHolder.getContext().getAuthentication();
            if (auth != null) {
                response.sendError(HttpStatus.FORBIDDEN.value(), "Access Denied!");
            }
        }
    }
  learner_created: true
- name: src/antifraud/exception/UserAlreadyExistException.java
  visible: true
  text: |
    package antifraud.exception;

    public class UserAlreadyExistException extends Exception {

        public UserAlreadyExistException(String message) {
            super(message);
        }
    }
  learner_created: true
- name: src/antifraud/domain/UserDeletionResponse.java
  visible: true
  text: |
    package antifraud.domain;

    import lombok.*;

    @Data
    @Builder
    @RequiredArgsConstructor
    @AllArgsConstructor
    public class UserDeletionResponse {

        private String username;
        private String status;

        public static final String DEFAULT_STATUS = "Deleted successfully!";
    }
  learner_created: true
- name: src/antifraud/exception/UserNotFoundException.java
  visible: true
  text: |
    package antifraud.exception;

    public class UserNotFoundException extends Exception {

        public UserNotFoundException(String message) {
            super(message);
        }
    }
  learner_created: true
- name: src/antifraud/domain/AccessUpdateResponse.java
  visible: true
  text: |
    package antifraud.domain;

    import lombok.AllArgsConstructor;
    import lombok.Builder;
    import lombok.Data;
    import lombok.RequiredArgsConstructor;

    @Data
    @Builder
    @RequiredArgsConstructor
    @AllArgsConstructor
    public class AccessUpdateResponse {

        private String status;
    }
  learner_created: true
- name: src/antifraud/repository/TransactionRepository.java
  visible: true
  text: |
    package antifraud.repository;

    import antifraud.model.Transaction;
    import org.springframework.data.repository.CrudRepository;

    public interface TransactionRepository extends CrudRepository<Transaction, Long> {
    }
  learner_created: true
- name: src/antifraud/domain/CardDeletionResponse.java
  visible: true
  text: |
    package antifraud.domain;

    import lombok.AllArgsConstructor;
    import lombok.Builder;
    import lombok.Data;
    import lombok.RequiredArgsConstructor;

    @Data
    @Builder
    @RequiredArgsConstructor
    @AllArgsConstructor
    public class CardDeletionResponse {

        private String status;
    }
  learner_created: true
- name: src/antifraud/mapper/UserMapper.java
  visible: true
  text: |
    package antifraud.mapper;

    import antifraud.domain.UserDto;
    import antifraud.model.User;
    import org.springframework.stereotype.Component;

    import java.util.List;
    import java.util.stream.Collectors;

    @Component
    public class UserMapper {

        public UserDto toDto(User user) {
            return UserDto.builder().id(user.getId()).name(user.getName())
                    .username(user.getUsername()).role(user.getRole().getDescription()).build();
        }

        public List<UserDto> toList(List<User> users) {
            return users.isEmpty() ? List.of() : users.stream().map(this::toDto).collect(Collectors.toList());
        }
    }
  learner_created: true
- name: src/antifraud/domain/Region.java
  visible: true
  learner_created: true
- name: src/antifraud/exception/AdminLockException.java
  visible: true
  learner_created: true
- name: src/antifraud/domain/TransactionDto.java
  visible: true
  learner_created: true
- name: src/antifraud/exception/InvalidRegionException.java
  visible: true
  learner_created: true
- name: src/antifraud/repository/AddressBlacklistRepository.java
  visible: true
  text: |
    package antifraud.repository;

    import antifraud.model.Address;
    import org.springframework.data.repository.CrudRepository;

    import java.util.List;
    import java.util.Optional;

    public interface AddressRepository extends CrudRepository<Address, Long> {

        Optional<Address> findByIp(String ip);
        List<Address> findAll();
    }
  learner_created: true
- name: src/antifraud/service/AddressBlacklistService.java
  visible: true
  text: |
    package antifraud.service;

    import antifraud.domain.AddressDeletionResponse;
    import antifraud.exception.AddressAlreadyExistException;
    import antifraud.exception.AddressNotFoundException;
    import antifraud.model.Address;

    import java.util.List;
    import java.util.Optional;

    public interface AddressService {

        List<Address> findAll();
        Address create(Address address) throws AddressAlreadyExistException;

        AddressDeletionResponse removeIP(String ip) throws AddressNotFoundException;

        Optional<Address> findByIP(String ip);
    }
  learner_created: true
- name: src/antifraud/service/AddressBlacklistServiceImpl.java
  visible: true
  text: |
    package antifraud.service;

    import antifraud.domain.AddressDeletionResponse;
    import antifraud.exception.AddressAlreadyExistException;
    import antifraud.exception.AddressNotFoundException;
    import antifraud.model.Address;
    import antifraud.repository.AddressRepository;
    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.stereotype.Service;

    import javax.transaction.Transactional;
    import java.util.List;
    import java.util.Optional;

    @Service
    public class AddressServiceImpl implements AddressService {

        private final AddressRepository addressRepository;

        @Autowired
        public AddressServiceImpl(AddressRepository addressRepository) {
            this.addressRepository = addressRepository;
        }

        @Override
        public List<Address> findAll() {
            return addressRepository.findAll();
        }

        @Override
        @Transactional
        public Address create(Address address) throws AddressAlreadyExistException {

            var addressOptional = addressRepository.findByIp(address.getIp());

            if (addressOptional.isPresent()) {
                throw new AddressAlreadyExistException("IP address already exist!");
            }

            return addressRepository.save(address);
        }

        @Override
        @Transactional
        public AddressDeletionResponse removeIP(String ip) throws AddressNotFoundException {
            Address address = addressRepository.findByIp(ip).orElseThrow(() -> new AddressNotFoundException("IP address not found!"));
            addressRepository.delete(address);

            String status = String.format("IP %s successfully removed!", ip);

            return AddressDeletionResponse.builder().status(status).build();
        }

        @Override
        public Optional<Address> findByIP(String ip) {
            return addressRepository.findByIp(ip);
        }
    }
  learner_created: true
- name: src/antifraud/model/Address.java
  visible: true
  text: |
    package antifraud.model;

    import antifraud.util.AntiFraudValidator;
    import com.fasterxml.jackson.annotation.JsonIgnore;
    import lombok.*;
    import org.hibernate.Hibernate;

    import javax.persistence.*;
    import javax.validation.constraints.AssertTrue;
    import javax.validation.constraints.NotEmpty;
    import java.util.Objects;

    @Getter
    @Setter
    @ToString
    @AllArgsConstructor
    @RequiredArgsConstructor
    @Entity
    @Table(name = "addresses")
    @SequenceGenerator(name = "address_sequence", sequenceName = "AddressSequence")
    public class Address {

        @Id
        @Column(name = "address_id")
        @GeneratedValue(strategy = GenerationType.SEQUENCE, generator = "address_sequence")
        private Long id;
        @NotEmpty(message = "ip address must not be empty")
        private String ip;

        @Override
        public boolean equals(Object o) {
            if (this == o) return true;
            if (o == null || Hibernate.getClass(this) != Hibernate.getClass(o)) return false;
            Address address = (Address) o;
            return id != null && Objects.equals(id, address.id);
        }

        @AssertTrue(message = "ip address is not valid")
        @JsonIgnore
        public boolean isValidIp() {
            return ip != null && AntiFraudValidator.isValidIP().test(ip);
        }

        @Override
        public int hashCode() {
            return getClass().hashCode();
        }
    }
  learner_created: true
- name: src/antifraud/repository/CardBlackListRepository.java
  visible: true
  text: |
    package antifraud.repository;

    import antifraud.model.Card;
    import org.springframework.data.repository.CrudRepository;

    import java.util.List;
    import java.util.Optional;

    public interface CardRepository extends CrudRepository<Card, Long> {

        Optional<Card> findByNumber(String number);

        List<Card> findAll();
    }
  learner_created: true
- name: src/antifraud/service/CardBlacklistService.java
  visible: true
  text: |
    package antifraud.service;

    import antifraud.domain.CardDeletionResponse;
    import antifraud.exception.CardAlreadyExistException;
    import antifraud.exception.CardNotFoundException;
    import antifraud.model.Card;

    import java.util.List;
    import java.util.Optional;

    public interface CardService {

        Card create(Card card) throws CardAlreadyExistException;
        CardDeletionResponse removeByNumber(String number) throws CardNotFoundException;
        List<Card> findAll();

        Optional<Card> findByNUmber(String number);
    }
  learner_created: true
- name: src/antifraud/service/CardBlacklistServiceImpl.java
  visible: true
  text: |
    package antifraud.service;


    import antifraud.domain.CardDeletionResponse;
    import antifraud.exception.CardAlreadyExistException;
    import antifraud.exception.CardNotFoundException;
    import antifraud.model.Card;
    import antifraud.repository.CardRepository;
    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.stereotype.Service;

    import javax.transaction.Transactional;
    import java.util.List;
    import java.util.Optional;

    @Service
    public class CardServiceImpl implements CardService {

        private final CardRepository cardRepository;

        @Autowired
        public CardServiceImpl(CardRepository cardRepository) {
            this.cardRepository = cardRepository;
        }

        @Override
        @Transactional
        public Card create(Card newCard) throws CardAlreadyExistException {

            var car = cardRepository.findByNumber(newCard.getNumber());

            if (car.isPresent()) {
                throw new CardAlreadyExistException("Card already exist!");
            }

            return cardRepository.save(newCard);
        }

        @Override
        @Transactional
        public CardDeletionResponse removeByNumber(String number) throws CardNotFoundException {
            Card card = cardRepository.findByNumber(number).orElseThrow(() -> new CardNotFoundException("Card not found!"));
            cardRepository.delete(card);

            String status = String.format("Card %s successfully removed!", number);

            return CardDeletionResponse.builder().status(status).build();
        }

        @Override
        public List<Card> findAll() {
            return cardRepository.findAll();
        }

        @Override
        public Optional<Card> findByNUmber(String number) {
            return cardRepository.findByNumber(number);
        }
    }
  learner_created: true
- name: src/antifraud/exception/TransactionDateParsingException.java
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/18071#comment
status: Solved
feedback:
  message: Congratulations!
  time: Sat, 29 Oct 2022 12:07:05 UTC
record: -1
